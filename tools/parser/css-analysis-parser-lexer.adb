
with Ada.Text_IO;
with CSS.Analysis.Parser.Lexer_dfa;
with CSS.Analysis.Parser.Lexer_IO;
package body CSS.Analysis.Parser.Lexer is

   use Ada.Text_IO;
   use Ada.Strings.Unbounded;
   use Ada;
   use CSS.Analysis.Parser.Lexer_dfa;
   use CSS.Analysis.Parser.Lexer_IO;

   pragma Style_Checks (Off);
   pragma Warnings (Off);
   function YYLex return Token is
      subtype Short is Integer range -32768 .. 32767;
      yy_act : Integer;
      yy_c   : Short;

      --  returned upon end-of-file
      YY_END_TOK : constant Integer := 0;
      YY_END_OF_BUFFER : constant := 31;
      subtype yy_state_type is Integer;
      yy_current_state : yy_state_type;
INITIAL : constant := 0;
COMMENT : constant := 1;
      yy_accept : constant array (0 .. 139) of Short :=
          (0,
        0,    0,    2,    2,   31,   30,   21,   19,   16,   30,
       11,   12,   17,   18,   20,   30,   30,   29,   30,   30,
       13,   15,    9,   30,   10,   27,    7,   14,    8,   30,
       30,   30,   25,    2,    4,    3,   21,   24,    0,   27,
        1,   29,   22,    0,    0,    0,   27,   27,    0,   27,
        0,   23,    0,   25,    0,    0,    0,   25,   25,    0,
       25,    0,    2,    3,    3,    5,    0,    0,    0,    0,
       28,    0,   27,   27,   27,   27,   27,    0,    0,    0,
        0,   26,    0,   25,   25,   25,   25,   25,    0,    0,
        0,    0,    0,   27,   27,   27,    0,    0,    0,    0,

        0,   25,   25,   25,    0,    0,    0,   27,   27,    0,
        0,    0,   25,   25,    0,    0,   27,   27,    0,    0,
       25,   25,    0,    0,   27,   27,    0,    0,   25,   25,
        0,    0,   27,    0,    0,   25,    0,    0,    0
       );

      yy_ec : constant array (ASCII.NUL .. Character'Last) of Short := (0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    4,    5,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    6,    1,    7,   34,   36,    8,   37,    9,
       10,   11,   12,   13,   14,   39,   15,   16,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   57,   27,
       28,   29,   30,   62,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       31,   32,   33,   92,   34,   94,   35,   36,   37,   38,

       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
       49,   50,   51,   52,   53,   54,   55,   56,   57,   58,
       59,   60,   61,   62,   63,   96,  126, others => 1

       );

      yy_meta : constant array (0 .. 63) of Short :=
          (0,
        1,    1,    2,    3,    3,    1,    1,    1,    4,    1,
        5,    1,    1,    6,    1,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    1,    1,    1,    8,    1,
        1,    9,    1,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        1,    1,    1
       );

      yy_base : constant array (0 .. 159) of Short :=
          (0,
        0,   50,   62,   63,  239, 1738,   65, 1738, 1738,  228,
     1738, 1738, 1738, 1738, 1738,  191,  211,    0,  140,   97,
     1738, 1738, 1738,  114, 1738,  108, 1738,  104, 1738,  133,
      109,  139,  110,    0, 1738,   60,   76, 1738,  164,  111,
     1738,    0, 1738,  112,  189,  116,  115,  228,  118,  137,
      253, 1738,  278,  158,  159,  303,  163,  161,  342,  117,
      162,  367,    0,   61,  101, 1738,  187,  406,  112,  188,
     1738,  451,  252,  476, 1738,  189,  515,  206,  554,  111,
      225, 1738,  599,  253,  624, 1738,  209,  663,  277,  688,
       89,  250,  727,  752,  278,  777,  302,  802,   86,  303,

      841,  866,  366,  891,  916,  367,  941,  966,  991, 1016,
      474, 1041, 1066, 1091, 1116, 1141, 1166, 1191, 1216, 1241,
     1266, 1291, 1316, 1341, 1366, 1391, 1416, 1441, 1466, 1491,
     1516, 1541,  350,  476, 1566,  414,  519,  623, 1738, 1606,
      105,  106, 1610, 1619, 1625,   74, 1629, 1638, 1644, 1653,
     1662, 1671, 1677, 1686, 1695, 1701, 1710, 1719, 1728
       );

      yy_def : constant array (0 .. 159) of Short :=
          (0,
      139,    1,  140,  140,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  141,  139,  142,  139,  143,
      139,  139,  139,  144,  139,  145,  139,  139,  139,  146,
      147,  148,  149,  150,  139,  151,  139,  139,  144,  145,
      139,  142,  139,  143,  152,  153,  145,  145,  139,  145,
      154,  139,  148,  149,  147,  155,  156,  149,  149,  139,
      149,  157,  150,  151,  151,  139,  153,  139,  139,  153,
      139,  158,  145,   48,  139,  145,   48,  156,  139,  139,
      156,  139,  159,  149,   59,  139,  149,   59,  153,   68,
      139,  153,   68,   48,  145,   77,  156,   79,  139,  156,

       79,   59,  149,   88,   68,  153,   93,   48,   77,   79,
      156,  101,   59,   88,   68,   93,   48,   77,   79,  101,
       59,   88,   68,   93,   48,   77,   79,  101,   59,   88,
       68,   93,  125,  156,  101,  129,  131,  156,    0,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139
       );

      yy_nxt : constant array (0 .. 1801) of Short :=
          (0,
        6,    7,    7,    7,    7,    8,    9,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   19,   20,   21,    6,   22,
       23,   24,   25,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       27,   28,   29,   30,   35,   35,   37,   37,   37,   37,
       65,  139,   36,   36,   66,  139,   31,   37,   37,   37,
       37,   32,   54,   33,   33,   33,   33,   33,   33,   33,
       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,

       33,   33,   33,   33,   33,   33,   33,   33,   33,   33,
       44,   65,   42,   40,   82,   66,   49,   71,   60,   49,
       99,   91,   55,   49,   69,  139,   86,   75,   45,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   51,
       56,   62,   51,   45,   71,   49,   51,   72,   48,   48,
       48,   48,   48,   48,   59,   59,   59,   59,   59,   59,
       59,   59,   59,   59,   53,   52,   60,   43,   51,   60,
       60,   80,  139,   59,   59,   59,   59,   59,   59,   48,
       48,   48,   48,   48,   48,   48,   48,   48,   48,   62,
       56,   82,   62,   62,   83,   69,   69,   49,   48,   48,

       48,   48,   48,   48,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   80,   71,   71,   60,   72,   72,
       51,   41,   39,   68,   68,   68,   68,   68,   68,   47,
       47,   47,   73,   80,   82,   38,   49,   83,  139,  139,
       62,  139,  139,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   74,   82,   47,   58,   83,  139,   69,   51,
       49,   60,   74,   74,   74,   74,   74,   74,   77,   77,
       77,   77,   77,   77,   77,   77,   77,   77,   71,   67,
       76,   72,  139,   51,   62,   69,   49,   77,   77,   77,
       77,   77,   77,   59,   59,   59,   59,   59,   59,   59,

       59,   59,   59,  139,   78,   71,  139,  139,   72,   51,
       80,   80,   59,   59,   59,   59,   59,   59,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,  139,  139,
       82,   82,  139,   83,   83,  139,  139,   79,   79,   79,
       79,   79,   79,   58,   58,   58,   84,  139,  139,  139,
       60,   76,   76,   76,   95,  139,  139,   85,   85,   85,
       85,   85,   85,   85,   85,   85,   85,  139,   87,   92,
      139,  139,  139,   62,   60,   69,   85,   85,   85,   85,
       85,   85,   88,   88,   88,   88,   88,   88,   88,   88,
       88,   88,  139,  139,  139,   71,  139,   62,   72,  139,

      139,   88,   88,   88,   88,   88,   88,   67,   67,   67,
       89,  139,  139,  139,   69,   87,   87,   87,  103,   70,
      139,   90,   90,   90,   90,   90,   90,   90,   90,   90,
       90,  139,  139,  139,   71,  139,  139,   72,  139,   70,
       90,   90,   90,   90,   90,   90,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,   70,   70,   70,   70,   70,   93,   93,   93,   93,
       93,   93,   93,   93,   93,   93,  100,   78,   78,   78,
       97,  139,   80,  139,   80,   93,   93,   93,   93,   93,
       93,   94,   94,   94,   94,   94,   94,   94,   94,   94,

       94,  139,   82,  139,   82,   83,  139,   83,  139,  139,
       94,   94,   94,   94,   94,   94,   76,   76,   76,   95,
       92,   92,   92,  106,  139,  139,  139,  139,  139,  139,
       96,   96,   96,   96,   96,   96,   96,   96,   96,   96,
      139,  139,  139,  139,  139,  139,  139,  139,  139,   96,
       96,   96,   96,   96,   96,   78,   78,   78,   97,  139,
      139,  139,   80,  139,  139,  139,  139,   81,  139,   98,
       98,   98,   98,   98,   98,   98,   98,   98,   98,  139,
      139,  139,   82,  139,  139,   83,  139,   81,   98,   98,
       98,   98,   98,   98,   81,   81,   81,   81,   81,   81,

       81,   81,   81,   81,   81,   81,   81,   81,   81,   81,
       81,   81,   81,   81,  101,  101,  101,  101,  101,  101,
      101,  101,  101,  101,  100,  100,  100,  111,  139,  139,
      139,   80,  139,  101,  101,  101,  101,  101,  101,  102,
      102,  102,  102,  102,  102,  102,  102,  102,  102,  139,
      139,   82,  139,  139,   83,  139,  139,  139,  102,  102,
      102,  102,  102,  102,   87,   87,   87,  103,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  104,  104,
      104,  104,  104,  104,  104,  104,  104,  104,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  104,  104,  104,

      104,  104,  104,  105,  105,  105,  105,  105,  105,  105,
      105,  105,  105,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  105,  105,  105,  105,  105,  105,   92,   92,
       92,  106,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  107,  107,  107,  107,  107,  107,  107,  107,
      107,  107,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  107,  107,  107,  107,  107,  107,  108,  108,  108,
      108,  108,  108,  108,  108,  108,  108,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  108,  108,  108,  108,
      108,  108,  109,  109,  109,  109,  109,  109,  109,  109,

      109,  109,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  109,  109,  109,  109,  109,  109,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  110,  110,  110,  110,
      110,  110,  100,  100,  100,  111,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  112,  112,  112,  112,  112,
      112,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,  139,  139,  139,  139,  139,  139,  139,  139,  139,

      113,  113,  113,  113,  113,  113,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  114,  114,  114,  114,  114,
      114,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      115,  115,  115,  115,  115,  115,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  116,  116,  116,  116,  116,
      116,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  139,  139,  139,  139,  139,  139,  139,  139,  139,

      117,  117,  117,  117,  117,  117,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  118,  118,  118,  118,  118,
      118,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      119,  119,  119,  119,  119,  119,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  120,  120,  120,  120,  120,
      120,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,  139,  139,  139,  139,  139,  139,  139,  139,  139,

      121,  121,  121,  121,  121,  121,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  122,  122,  122,  122,  122,
      122,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      123,  123,  123,  123,  123,  123,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  124,  124,  124,  124,  124,
      124,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,  139,  139,  139,  139,  139,  139,  139,  139,  139,

      125,  125,  125,  125,  125,  125,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  126,  126,  126,  126,  126,
      126,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      127,  127,  127,  127,  127,  127,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  128,  128,  128,  128,  128,
      128,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,  139,  139,  139,  139,  139,  139,  139,  139,  139,

      129,  129,  129,  129,  129,  129,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  130,  130,  130,  130,  130,
      130,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      131,  131,  131,  131,  131,  131,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  132,  132,  132,  132,  132,
      132,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,  139,  139,  139,  139,  139,  139,  139,  139,  139,

       50,   50,   50,   50,   50,   50,  133,  133,  133,  133,
      133,  133,  133,  133,  133,  133,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  133,  133,  133,  133,  133,
      133,  134,  134,  134,  134,  134,  134,  134,  134,  134,
      134,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      134,  134,  134,  134,  134,  134,  135,  135,  135,  135,
      135,  135,  135,  135,  135,  135,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  135,  135,  135,  135,  135,
      135,   61,   61,   61,   61,   61,   61,   61,   61,   61,
       61,  139,  139,  139,  139,  139,  139,  139,  139,  139,

       61,   61,   61,   61,   61,   61,  136,  136,  136,  136,
      136,  136,  136,  136,  136,  136,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  136,  136,  136,  136,  136,
      136,   70,   70,   70,   70,   70,   70,   70,   70,   70,
       70,  139,  139,  139,  139,  139,  139,  139,  139,  139,
       70,   70,   70,   70,   70,   70,  137,  137,  137,  137,
      137,  137,  137,  137,  137,  137,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  137,  137,  137,  137,  137,
      137,  138,  138,  138,  138,  138,  138,  138,  138,  138,
      138,  139,  139,  139,  139,  139,  139,  139,  139,  139,

      138,  138,  138,  138,  138,  138,   34,   34,   34,   34,
       34,   34,   34,   34,   34,   46,  139,  139,   46,   47,
      139,  139,   47,   47,   47,   47,   47,   47,   50,  139,
       50,   50,  139,   50,   57,  139,  139,   57,   58,  139,
      139,   58,   58,   58,   58,   58,   58,   61,  139,   61,
       61,  139,   61,   63,  139,   63,   63,  139,   63,   63,
       63,   63,   64,  139,   64,   64,   64,   64,   64,   64,
       64,   67,  139,  139,   67,   67,   67,   67,   67,   67,
       70,  139,   70,   70,   70,   70,   76,  139,  139,   76,
       76,   76,   76,   76,   76,   78,  139,  139,   78,   78,

       78,   78,   78,   78,   81,  139,   81,   81,   81,   81,
       87,  139,  139,   87,   87,   87,   87,   87,   87,   92,
      139,  139,   92,   92,   92,   92,   92,   92,  100,  139,
      139,  100,  100,  100,  100,  100,  100,    5,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,

      139
       );

      yy_chk : constant array (0 .. 1801) of Short :=
          (0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2,    3,    4,    7,    7,    7,    7,
       36,   64,    3,    4,   36,   64,    2,   37,   37,   37,
       37,    2,  146,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
       20,   65,  142,  141,   99,   65,   26,   91,   33,   40,
       80,   69,   31,   47,   46,   44,   60,   49,   20,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   26,
       31,   33,   40,   44,   46,   50,   47,   46,   24,   24,
       24,   24,   24,   24,   32,   32,   32,   32,   32,   32,
       32,   32,   32,   32,   30,   28,   54,   19,   50,   58,
       61,   57,   55,   32,   32,   32,   32,   32,   32,   39,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   54,
       55,   57,   58,   61,   57,   67,   70,   76,   39,   39,

       39,   39,   39,   39,   45,   45,   45,   45,   45,   45,
       45,   45,   45,   45,   78,   67,   70,   87,   67,   70,
       76,   17,   16,   45,   45,   45,   45,   45,   45,   48,
       48,   48,   48,   81,   78,   10,   48,   78,    5,    0,
       87,    0,    0,   48,   48,   48,   48,   48,   48,   48,
       48,   48,   48,   81,   73,   84,   81,    0,   92,   48,
       73,   84,   48,   48,   48,   48,   48,   48,   51,   51,
       51,   51,   51,   51,   51,   51,   51,   51,   92,   89,
       95,   92,    0,   73,   84,   89,   95,   51,   51,   51,
       51,   51,   51,   53,   53,   53,   53,   53,   53,   53,

       53,   53,   53,    0,   97,   89,    0,    0,   89,   95,
       97,  100,   53,   53,   53,   53,   53,   53,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,    0,    0,
       97,  100,    0,   97,  100,    0,    0,   56,   56,   56,
       56,   56,   56,   59,   59,   59,   59,    0,    0,    0,
       59,  133,  133,  133,  133,    0,    0,   59,   59,   59,
       59,   59,   59,   59,   59,   59,   59,    0,  103,  106,
        0,    0,    0,   59,  103,  106,   59,   59,   59,   59,
       59,   59,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,    0,    0,    0,  106,    0,  103,  106,    0,

        0,   62,   62,   62,   62,   62,   62,   68,   68,   68,
       68,    0,    0,    0,   68,  136,  136,  136,  136,   68,
        0,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,    0,    0,    0,   68,    0,    0,   68,    0,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   68,   68,   68,   68,
       68,   68,   68,   68,   68,   68,   72,   72,   72,   72,
       72,   72,   72,   72,   72,   72,  111,  134,  134,  134,
      134,    0,  111,    0,  134,   72,   72,   72,   72,   72,
       72,   74,   74,   74,   74,   74,   74,   74,   74,   74,

       74,    0,  111,    0,  134,  111,    0,  134,    0,    0,
       74,   74,   74,   74,   74,   74,   77,   77,   77,   77,
      137,  137,  137,  137,    0,    0,    0,    0,    0,    0,
       77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   77,
       77,   77,   77,   77,   77,   79,   79,   79,   79,    0,
        0,    0,   79,    0,    0,    0,    0,   79,    0,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,    0,
        0,    0,   79,    0,    0,   79,    0,   79,   79,   79,
       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,

       79,   79,   79,   79,   79,   79,   79,   79,   79,   79,
       79,   79,   79,   79,   83,   83,   83,   83,   83,   83,
       83,   83,   83,   83,  138,  138,  138,  138,    0,    0,
        0,  138,    0,   83,   83,   83,   83,   83,   83,   85,
       85,   85,   85,   85,   85,   85,   85,   85,   85,    0,
        0,  138,    0,    0,  138,    0,    0,    0,   85,   85,
       85,   85,   85,   85,   88,   88,   88,   88,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   88,   88,
       88,   88,   88,   88,   88,   88,   88,   88,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   88,   88,   88,

       88,   88,   88,   90,   90,   90,   90,   90,   90,   90,
       90,   90,   90,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   90,   90,   90,   90,   90,   90,   93,   93,
       93,   93,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   93,   93,   93,   93,   93,   93,   93,   93,
       93,   93,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   93,   93,   93,   93,   93,   93,   94,   94,   94,
       94,   94,   94,   94,   94,   94,   94,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   94,   94,   94,   94,
       94,   94,   96,   96,   96,   96,   96,   96,   96,   96,

       96,   96,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   96,   96,   96,   96,   96,   96,   98,   98,   98,
       98,   98,   98,   98,   98,   98,   98,    0,    0,    0,
        0,    0,    0,    0,    0,    0,   98,   98,   98,   98,
       98,   98,  101,  101,  101,  101,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  101,  101,  101,  101,
      101,  101,  101,  101,  101,  101,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  101,  101,  101,  101,  101,
      101,  102,  102,  102,  102,  102,  102,  102,  102,  102,
      102,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      102,  102,  102,  102,  102,  102,  104,  104,  104,  104,
      104,  104,  104,  104,  104,  104,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  104,  104,  104,  104,  104,
      104,  105,  105,  105,  105,  105,  105,  105,  105,  105,
      105,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      105,  105,  105,  105,  105,  105,  107,  107,  107,  107,
      107,  107,  107,  107,  107,  107,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  107,  107,  107,  107,  107,
      107,  108,  108,  108,  108,  108,  108,  108,  108,  108,
      108,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      108,  108,  108,  108,  108,  108,  109,  109,  109,  109,
      109,  109,  109,  109,  109,  109,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  109,  109,  109,  109,  109,
      109,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      110,  110,  110,  110,  110,  110,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  112,  112,  112,  112,  112,
      112,  113,  113,  113,  113,  113,  113,  113,  113,  113,
      113,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      113,  113,  113,  113,  113,  113,  114,  114,  114,  114,
      114,  114,  114,  114,  114,  114,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  114,  114,  114,  114,  114,
      114,  115,  115,  115,  115,  115,  115,  115,  115,  115,
      115,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      115,  115,  115,  115,  115,  115,  116,  116,  116,  116,
      116,  116,  116,  116,  116,  116,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  116,  116,  116,  116,  116,
      116,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      117,  117,  117,  117,  117,  117,  118,  118,  118,  118,
      118,  118,  118,  118,  118,  118,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  118,  118,  118,  118,  118,
      118,  119,  119,  119,  119,  119,  119,  119,  119,  119,
      119,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      119,  119,  119,  119,  119,  119,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  120,  120,  120,  120,  120,
      120,  121,  121,  121,  121,  121,  121,  121,  121,  121,
      121,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      121,  121,  121,  121,  121,  121,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  122,  122,  122,  122,  122,
      122,  123,  123,  123,  123,  123,  123,  123,  123,  123,
      123,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      123,  123,  123,  123,  123,  123,  124,  124,  124,  124,
      124,  124,  124,  124,  124,  124,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  124,  124,  124,  124,  124,
      124,  125,  125,  125,  125,  125,  125,  125,  125,  125,
      125,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      125,  125,  125,  125,  125,  125,  126,  126,  126,  126,
      126,  126,  126,  126,  126,  126,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  126,  126,  126,  126,  126,
      126,  127,  127,  127,  127,  127,  127,  127,  127,  127,
      127,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      127,  127,  127,  127,  127,  127,  128,  128,  128,  128,
      128,  128,  128,  128,  128,  128,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  128,  128,  128,  128,  128,
      128,  129,  129,  129,  129,  129,  129,  129,  129,  129,
      129,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      129,  129,  129,  129,  129,  129,  130,  130,  130,  130,
      130,  130,  130,  130,  130,  130,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  130,  130,  130,  130,  130,
      130,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      131,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      131,  131,  131,  131,  131,  131,  132,  132,  132,  132,
      132,  132,  132,  132,  132,  132,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  132,  132,  132,  132,  132,
      132,  135,  135,  135,  135,  135,  135,  135,  135,  135,
      135,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      135,  135,  135,  135,  135,  135,  140,  140,  140,  140,
      140,  140,  140,  140,  140,  143,    0,    0,  143,  144,
        0,    0,  144,  144,  144,  144,  144,  144,  145,    0,
      145,  145,    0,  145,  147,    0,    0,  147,  148,    0,
        0,  148,  148,  148,  148,  148,  148,  149,    0,  149,
      149,    0,  149,  150,    0,  150,  150,    0,  150,  150,
      150,  150,  151,    0,  151,  151,  151,  151,  151,  151,
      151,  152,    0,    0,  152,  152,  152,  152,  152,  152,
      153,    0,  153,  153,  153,  153,  154,    0,    0,  154,
      154,  154,  154,  154,  154,  155,    0,    0,  155,  155,

      155,  155,  155,  155,  156,    0,  156,  156,  156,  156,
      157,    0,    0,  157,  157,  157,  157,  157,  157,  158,
        0,    0,  158,  158,  158,  158,  158,  158,  159,    0,
        0,  159,  159,  159,  159,  159,  159,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,
      139,  139,  139,  139,  139,  139,  139,  139,  139,  139,

      139
       );


      --  copy whatever the last rule matched to the standard output


      --  enter a start condition.
      --  Using procedure requires a () after the ENTER, but makes everything
      --  much neater.

      procedure ENTER (state : Integer) is
      begin
         yy_start := 1 + 2 * state;
      end ENTER;

      --  action number for EOF rule of a given start state
      function YY_STATE_EOF (state : Integer) return Integer is
      begin
         return YY_END_OF_BUFFER + state + 1;
      end YY_STATE_EOF;

      --  return all but the first 'n' matched characters back to the input stream
      procedure yyless (n : Integer) is
      begin
         yy_ch_buf (yy_cp) := yy_hold_char; --  undo effects of setting up yytext
         yy_cp := yy_bp + n;
         yy_c_buf_p := yy_cp;
         YY_DO_BEFORE_ACTION; -- set up yytext again
      end yyless;

      --  redefine this if you have something you want each time.
      procedure YY_USER_ACTION is
      begin
         null;
      end YY_USER_ACTION;

      --  yy_get_previous_state - get the state just before the EOB char was reached

      function yy_get_previous_state return yy_state_type is
         yy_current_state : yy_state_type;
         yy_c : Short;
         yy_bp : constant Integer := yytext_ptr;
      begin
         yy_current_state := yy_start;
         if yy_ch_buf (yy_bp - 1) = ASCII.LF then
            yy_current_state := yy_current_state + 1;
         end if;

         for yy_cp in yytext_ptr .. yy_c_buf_p - 1 loop
            yy_c := yy_ec (yy_ch_buf (yy_cp));
            if yy_accept (yy_current_state) /= 0 then
               yy_last_accepting_state := yy_current_state;
               yy_last_accepting_cpos := yy_cp;
               yy_last_yylineno := yylineno;
               yy_last_yylinecol := yylinecol;
            end if;
            while yy_chk (yy_base (yy_current_state) + yy_c) /= yy_current_state loop
               yy_current_state := yy_def (yy_current_state);
               if yy_current_state >= 140 then
                  yy_c := yy_meta (yy_c);
               end if;
            end loop;
            yy_current_state := yy_nxt (yy_base (yy_current_state) + yy_c);
         end loop;

         return yy_current_state;
      end yy_get_previous_state;

      procedure yyrestart (input_file : File_Type) is
      begin
         Open_Input (Text_IO.Name (input_file));
      end yyrestart;

   begin -- of YYLex
      <<new_file>>
      --  this is where we enter upon encountering an end-of-file and
      --  yyWrap () indicating that we should continue processing

      if yy_init then
         if yy_start = 0 then
            yy_start := 1;      -- first start state
         end if;

         --  we put in the '\n' and start reading from [1] so that an
         --  initial match-at-newline will be true.

         yy_ch_buf (0) := ASCII.LF;
         yy_n_chars := 1;

         --  we always need two end-of-buffer characters. The first causes
         --  a transition to the end-of-buffer state. The second causes
         --  a jam in that state.

         yy_ch_buf (yy_n_chars) := YY_END_OF_BUFFER_CHAR;
         yy_ch_buf (yy_n_chars + 1) := YY_END_OF_BUFFER_CHAR;

         yy_eof_has_been_seen := False;

         yytext_ptr := 1;
         yy_c_buf_p := yytext_ptr;
         yy_hold_char := yy_ch_buf (yy_c_buf_p);
         yy_init := False;
      end if; -- yy_init

      loop                -- loops until end-of-file is reached


         yy_cp := yy_c_buf_p;

         --  support of yytext
         yy_ch_buf (yy_cp) := yy_hold_char;

         --  yy_bp points to the position in yy_ch_buf of the start of the
         --  current run.
         yy_bp := yy_cp;
         yy_current_state := yy_start;
         if yy_ch_buf (yy_bp - 1) = ASCII.LF then
            yy_current_state := yy_current_state + 1;
         end if;
         loop
               yy_c := yy_ec (yy_ch_buf (yy_cp));
               if yy_accept (yy_current_state) /= 0 then
                  yy_last_accepting_state := yy_current_state;
                  yy_last_accepting_cpos := yy_cp;
                  yy_last_yylineno := yylineno;
                  yy_last_yylinecol := yylinecol;
               end if;
               while yy_chk (yy_base (yy_current_state) + yy_c) /= yy_current_state loop
                  yy_current_state := yy_def (yy_current_state);
                  if yy_current_state >= 140 then
                     yy_c := yy_meta (yy_c);
                  end if;
               end loop;
               yy_current_state := yy_nxt (yy_base (yy_current_state) + yy_c);
            if yy_ch_buf (yy_cp) = ASCII.LF then
               yylineno := yylineno + 1;
               yylinecol := 1;
            else
               yylinecol := yylinecol + 1;
            end if;
            yy_cp := yy_cp + 1;
            if yy_current_state = 139 then
                exit;
            end if;
         end loop;
         yy_cp := yy_last_accepting_cpos;
         yy_current_state := yy_last_accepting_state;
         yylineno := yy_last_yylineno;
         yylinecol := yy_last_yylinecol;

   <<next_action>>
         yy_act := yy_accept (yy_current_state);
         YY_DO_BEFORE_ACTION;
         YY_USER_ACTION;

         if aflex_debug then  -- output acceptance info. for (-d) debug mode
            Text_IO.Put (Standard_Error, "  -- Aflex.YYLex accept rule #");
            Text_IO.Put (Standard_Error, Integer'Image (yy_act));
            Text_IO.Put_Line (Standard_Error, "(""" & YYText & """)");
         end if;


   <<do_action>>   -- this label is used only to access EOF actions
         case yy_act is
            when 0 => -- must backtrack
            -- undo the effects of YY_DO_BEFORE_ACTION
            yy_ch_buf (yy_cp) := yy_hold_char;
            yy_cp := yy_last_accepting_cpos;
            yylineno := yy_last_yylineno;
            yylinecol := yy_last_yylinecol;
            yy_current_state := yy_last_accepting_state;
            goto next_action;


         when 1 => 
            Append (Current_Comment, "/*"); ENTER(COMMENT);

         when 2 => 
            Append (Current_Comment, YYText);

         when 3 => 
            Append (Current_Comment, YYText);

         when 4 => 
            Append (Current_Comment, YYText);

         when 5 => 
            Append (Current_Comment, YYText); ENTER(INITIAL);

   when YY_END_OF_BUFFER +COMMENT + 1 
 =>
Text_IO.Put_Line ("End of comment error!"); ENTER(INITIAL);

         when 7 => 
            return '{';

         when 8 => 
            return '}';

         when 9 => 
            return '[';

         when 10 => 
            return ']';

         when 11 => 
            return '(';

         when 12 => 
            return ')';

         when 13 => 
            return '=';

         when 14 => 
            return '|';

         when 15 => 
            return '?';

         when 16 => 
            return '#';

         when 17 => 
            return '*';

         when 18 => 
            return '+';

         when 19 => 
            return '!';

         when 20 => 
            return ',';

         when 21 => 
            return S;

         when 22 => 
             return R_DEFINE; 

         when 23 => 
             return R_FOLLOW; 

         when 24 => 
             return R_ANY; 

         when 25 => 
             Set_Ident (yylval, YYText, yylineno, yylinecol); return R_PROPERTY; 

         when 26 => 
             Set_Ident (yylval, YYText, yylineno, yylinecol); return R_DEF_NAME; 

         when 27 => 
             Set_Ident (yylval, YYText, yylineno, yylinecol); return R_IDENT; 

         when 28 => 
             Set_Ident (yylval, YYText, yylineno, yylinecol); return R_NAME; 

         when 29 => 
             Set_Ident (yylval, YYText, yylineno, yylinecol); return R_NUM; 

--  .               { Error (yylineno, yylinecol, "illegal character '" & YYText & "'"); }
         when 30 => 
                        raise AFLEX_SCANNER_JAMMED;
         when YY_END_OF_BUFFER + INITIAL + 1 =>
               return End_Of_Input;
            when YY_END_OF_BUFFER =>
               --  undo the effects of YY_DO_BEFORE_ACTION
               yy_ch_buf (yy_cp) := yy_hold_char;

               yytext_ptr := yy_bp;

               case yy_get_next_buffer is
                  when EOB_ACT_END_OF_FILE =>
                     if yyWrap then
                        --  note: because we've taken care in
                        --  yy_get_next_buffer() to have set up yytext,
                        --  we can now set up yy_c_buf_p so that if some
                        --  total hoser (like aflex itself) wants
                        --  to call the scanner after we return the
                        --  End_Of_Input, it'll still work - another
                        --  End_Of_Input will get returned.

                        yy_c_buf_p := yytext_ptr;

                        yy_act := YY_STATE_EOF ((yy_start - 1) / 2);

                        goto do_action;
                     else
                        --  start processing a new file
                        yy_init := True;
                        goto new_file;
                     end if;

                  when EOB_ACT_RESTART_SCAN =>
                     yy_c_buf_p := yytext_ptr;
                     yy_hold_char := yy_ch_buf (yy_c_buf_p);

                  when EOB_ACT_LAST_MATCH =>
                     yy_c_buf_p := yy_n_chars;
                     yy_current_state := yy_get_previous_state;

                     yy_cp := yy_c_buf_p;
                     yy_bp := yytext_ptr;
                     goto next_action;
                  when others =>
                     null;
               end case; --  case yy_get_next_buffer()

            when others =>
               Text_IO.Put ("action # ");
               Text_IO.Put (Integer'Image (yy_act));
               Text_IO.New_Line;
               raise AFLEX_INTERNAL_ERROR;
         end case; --  case (yy_act)
      end loop; --  end of loop waiting for end of file
   end YYLex;
   pragma Style_Checks (On);

end CSS.Analysis.Parser.Lexer;



