
pragma Style_Checks (Off);
with Interfaces;
with CSS.Parser.Parser_Goto;
with CSS.Parser.Parser_Tokens; 
with CSS.Parser.Parser_Shift_Reduce;
with CSS.Parser.Lexer_IO;
with CSS.Parser.Lexer;
with CSS.Parser.Lexer_Dfa;
with CSS.Core.Selectors;
with CSS.Core.Styles;
with Ada.Text_IO;
package body CSS.Parser.Parser is

   use Ada;
   use CSS.Parser.Lexer;
   use CSS.Core.Selectors;
   use CSS.Parser.Lexer_Dfa;
   use type Ada.Text_IO.Count;
   use type Interfaces.Unsigned_64;

   procedure yyparse;

   procedure yyerror (Message : in String := "syntax error");

   Document      : CSS.Core.Sheets.CSSStylesheet_Access;
   Current_Page  : CSS.Core.Styles.CSSPageRule_Access;
   Current_Rule  : CSS.Core.Styles.CSSStyleRule_Access;

   procedure yyerror (Message : in String := "syntax error") is
      pragma Unreferenced (Message);
   begin
      error_count := error_count + 1;
      Error (CSS.Parser.Lexer_Dfa.yylineno, CSS.Parser.Lexer_Dfa.yylinecol, Message);
   end yyerror;

   function Parse (Content  : in String;
                   Document : in CSS.Core.Sheets.CSSStylesheet_Access) return Integer is
   begin
      Error_Count := 0;
      CSS.Parser.Lexer_Dfa.yylineno  := 1;
      CSS.Parser.Lexer_Dfa.yylinecol := 1;
      CSS.Parser.Lexer_IO.Open_Input (Content);
      --  Expr := MAT.Expressions.EMPTY;
      CSS.Parser.Parser.Document := Document;
      yyparse;
      CSS.Parser.Parser.Document := null;
      CSS.Parser.Lexer_IO.Close_Input;
      Parser_Tokens.yylval := EMPTY;
      return Error_Count;

   exception
      when others =>
         CSS.Parser.Parser.Document := null;
         CSS.Parser.Lexer_IO.Close_Input;
         Parser_Tokens.yylval := EMPTY;
         raise;

   end Parse;

--  Warning: This file is automatically generated by AYACC.
--           It is useless to modify it. Change the ".Y" & ".L" files instead.


procedure YYParse is

   -- Rename User Defined Packages to Internal Names.
    package yy_goto_tables         renames
      Css.Parser.Parser_Goto;
    package yy_shift_reduce_tables renames
      Css.Parser.Parser_Shift_Reduce;
    package yy_tokens              renames
      Css.Parser.Parser_Tokens;

   use yy_tokens, yy_goto_tables, yy_shift_reduce_tables;

   procedure yyerrok;
   procedure yyclearin;


   package yy is

       -- the size of the value and state stacks
       --  Affects error 'Stack size exceeded on state_stack'
       stack_size : constant Natural :=  256;

       -- subtype rule         is natural;
       subtype parse_state  is natural;
       -- subtype nonterminal  is integer;

       -- encryption constants
       default           : constant := -1;
       first_shift_entry : constant :=  0;
       accept_code       : constant := -3001;
       error_code        : constant := -3000;

       -- stack data used by the parser
       tos                : natural := 0;
       value_stack        : array(0..stack_size) of yy_tokens.yystype;
       state_stack        : array(0..stack_size) of parse_state;

       -- current input symbol and action the parser is on
       action             : integer;
       rule_id            : rule;
       input_symbol       : yy_tokens.token:= Error;


       -- error recovery flag
       error_flag : natural := 0;
          -- indicates  3 - (number of valid shifts after an error occurs)

       look_ahead : boolean := true;
       index      : integer;

       -- Is Debugging option on or off
        DEBUG : constant boolean := FALSE;

    end yy;


    function goto_state
      (state : yy.parse_state;
       sym   : nonterminal) return yy.parse_state;

    function parse_action
      (state : yy.parse_state;
       t     : yy_tokens.token) return integer;

    pragma inline(goto_state, parse_action);


    function goto_state(state : yy.parse_state;
                        sym   : nonterminal) return yy.parse_state is
        index : integer;
    begin
        index := goto_offset(state);
        while  integer(goto_matrix(index).nonterm) /= sym loop
            index := index + 1;
        end loop;
        return integer(goto_matrix(index).newstate);
    end goto_state;


    function parse_action(state : yy.parse_state;
                          t     : yy_tokens.token) return integer is
        index      : integer;
        tok_pos    : integer;
        default    : constant integer := -1;
    begin
        tok_pos := yy_tokens.token'pos(t);
        index   := shift_reduce_offset(state);
        while integer(shift_reduce_matrix(index).t) /= tok_pos and then
              integer(shift_reduce_matrix(index).t) /= default
        loop
            index := index + 1;
        end loop;
        return integer(shift_reduce_matrix(index).act);
    end parse_action;

-- error recovery stuff

    procedure handle_error is
      temp_action : integer;
    begin

      if yy.error_flag = 3 then -- no shift yet, clobber input.
      if yy.debug then
          text_io.put_line("  -- Ayacc.YYParse: Error Recovery Clobbers " &
                   yy_tokens.token'image(yy.input_symbol));
      end if;
        if yy.input_symbol = yy_tokens.end_of_input then  -- don't discard,
        if yy.debug then
            text_io.put_line("  -- Ayacc.YYParse: Can't discard END_OF_INPUT, quiting...");
        end if;
        raise yy_tokens.syntax_error;
        end if;

            yy.look_ahead := true;   -- get next token
        return;                  -- and try again...
    end if;

    if yy.error_flag = 0 then -- brand new error
       yyerror("Syntax Error");
    end if;

    yy.error_flag := 3;

    -- find state on stack where error is a valid shift --

    if yy.debug then
        text_io.put_line("  -- Ayacc.YYParse: Looking for state with error as valid shift");
    end if;

    loop
        if yy.debug then
          text_io.put_line("  -- Ayacc.YYParse: Examining State " &
               yy.parse_state'image(yy.state_stack(yy.tos)));
        end if;
        temp_action := parse_action(yy.state_stack(yy.tos), error);

            if temp_action >= yy.first_shift_entry then
                if yy.tos = yy.stack_size then
                    text_io.put_line("  -- Ayacc.YYParse: Stack size exceeded on state_stack");
                    raise yy_Tokens.syntax_error;
                end if;
                yy.tos := yy.tos + 1;
                yy.state_stack(yy.tos) := temp_action;
                exit;
            end if;

        Decrement_Stack_Pointer :
        begin
          yy.tos := yy.tos - 1;
        exception
          when Constraint_Error =>
            yy.tos := 0;
        end Decrement_Stack_Pointer;

        if yy.tos = 0 then
          if yy.debug then
            text_io.put_line("  -- Ayacc.YYParse: Error recovery popped entire stack, aborting...");
          end if;
          raise yy_tokens.syntax_error;
        end if;
    end loop;

    if yy.debug then
        text_io.put_line("  -- Ayacc.YYParse: Shifted error token in state " &
              yy.parse_state'image(yy.state_stack(yy.tos)));
    end if;

    end handle_error;

   -- print debugging information for a shift operation
   procedure shift_debug(state_id: yy.parse_state; lexeme: yy_tokens.token) is
   begin
       text_io.put_line("  -- Ayacc.YYParse: Shift "& yy.parse_state'image(state_id)&" on input symbol "&
               yy_tokens.token'image(lexeme) );
   end;

   -- print debugging information for a reduce operation
   procedure reduce_debug(rule_id: rule; state_id: yy.parse_state) is
   begin
       text_io.put_line("  -- Ayacc.YYParse: Reduce by rule "&rule'image(rule_id)&" goto state "&
               yy.parse_state'image(state_id));
   end;

   -- make the parser believe that 3 valid shifts have occured.
   -- used for error recovery.
   procedure yyerrok is
   begin
       yy.error_flag := 0;
   end yyerrok;

   -- called to clear input symbol that caused an error.
   procedure yyclearin is
   begin
       -- yy.input_symbol := yylex;
       yy.look_ahead := true;
   end yyclearin;


begin
    -- initialize by pushing state 0 and getting the first input symbol
    yy.state_stack(yy.tos) := 0;


    loop

        yy.index := shift_reduce_offset(yy.state_stack(yy.tos));
        if integer(shift_reduce_matrix(yy.index).t) = yy.default then
            yy.action := integer(shift_reduce_matrix(yy.index).act);
        else
            if yy.look_ahead then
                yy.look_ahead   := false;

                yy.input_symbol := yylex;
            end if;
            yy.action :=
             parse_action(yy.state_stack(yy.tos), yy.input_symbol);
        end if;


        if yy.action >= yy.first_shift_entry then  -- SHIFT

            if yy.debug then
                shift_debug(yy.action, yy.input_symbol);
            end if;

            -- Enter new state
            if yy.tos = yy.stack_size then
                text_io.put_line(" Stack size exceeded on state_stack");
                raise yy_Tokens.syntax_error;
            end if;
            yy.tos := yy.tos + 1;
            yy.state_stack(yy.tos) := yy.action;
              yy.value_stack(yy.tos) := yylval;

        if yy.error_flag > 0 then  -- indicate a valid shift
            yy.error_flag := yy.error_flag - 1;
        end if;

            -- Advance lookahead
            yy.look_ahead := true;

        elsif yy.action = yy.error_code then       -- ERROR

            handle_error;

        elsif yy.action = yy.accept_code then
            if yy.debug then
                text_io.put_line("  -- Ayacc.YYParse: Accepting Grammar...");
            end if;
            exit;

        else -- Reduce Action

            -- Convert action into a rule
            yy.rule_id  := -1 * yy.action;

            -- Execute User Action
            -- user_action(yy.rule_id);


                case yy.rule_id is

when 4 => -- #line 75
 Error (
yy.value_stack(yy.tos).Line, 
yy.value_stack(yy.tos).Column, "Invalid CSS selector component"); 

when 30 => -- #line 151
 Current_Rule := null; 

when 31 => -- #line 154
 Current_Rule := null; 

when 34 => -- #line 165
 Current_Rule := null; Error (
yy.value_stack(yy.tos-2).line, 
yy.value_stack(yy.tos-1).line, "Found @media rule"); 

when 35 => -- #line 168
 Current_Rule := null; Error (yylval.Line, yylval.Column, "Media condition error"); 

when 36 => -- #line 173
 Current_Rule := null; 

when 37 => -- #line 176
 Current_Rule := null; 

when 38 => -- #line 181
 Current_Rule := null; Error (
yy.value_stack(yy.tos-2).line, 
yy.value_stack(yy.tos-1).line, "Found @<keyword> rule"); 

when 39 => -- #line 186
 Error (
yy.value_stack(yy.tos).line, 
yy.value_stack(yy.tos).column, "Found media_list"); 

when 64 => -- #line 257
 Error (yylval.Line, yylval.Column, "Invalid media in parens"); 

when 74 => -- #line 284
 Current_Page := null; 

when 75 => -- #line 287
 Current_Page := null; 

when 76 => -- #line 292
 null; 

when 77 => -- #line 295
 null; 

when 78 => -- #line 300
 Current_Page := new CSS.Core.Styles.CSSPageRule; 

when 82 => -- #line 313
 Set_Selector (
yyval, SEL_PSEUDO_ELEMENT, 
yy.value_stack(yy.tos)); 

when 83 => -- #line 318
 Append_Property (Current_Page.Style, Document, 
yy.value_stack(yy.tos-1)); 

when 84 => -- #line 321
 Append_Property (Current_Page.Style, Document, 
yy.value_stack(yy.tos-1)); 

when 87 => -- #line 332
 Set_Selector_Type (
yyval, SEL_NEXT_SIBLING, yylineno, yylinecol); 

when 88 => -- #line 335
 Set_Selector_Type (
yyval, SEL_CHILD, yylineno, yylinecol); 

when 89 => -- #line 338
 Set_Selector_Type (
yyval, SEL_FOLLOWING_SIBLING, yylineno, yylinecol); 

when 92 => -- #line 349
 Current_Rule := null; 

when 93 => -- #line 352
 Current_Rule := null; 

when 94 => -- #line 355
 Current_Rule := null; Error (
yy.value_stack(yy.tos-1).line, 
yy.value_stack(yy.tos-1).column, "Invalid CSS rule"); 

when 95 => -- #line 358
 Error (
yy.value_stack(yy.tos-2).Line, 
yy.value_stack(yy.tos-2).Column, "Syntax error in CSS rule"); 

when 97 => -- #line 365
 Error (
yy.value_stack(yy.tos-1).Line, 
yy.value_stack(yy.tos-1).Column, "Invalid CSS selector component"); 

when 98 => -- #line 370
 Add_Selector_List (Current_Rule, Document, 
yy.value_stack(yy.tos)); 

when 99 => -- #line 373
 Add_Selector_List (Current_Rule, Document, 
yy.value_stack(yy.tos)); 

when 100 => -- #line 378
 Add_Selector (
yy.value_stack(yy.tos-3), 
yy.value_stack(yy.tos-1)); 
yyval := 
yy.value_stack(yy.tos-3); 

when 101 => -- #line 381
 Add_Selector (
yy.value_stack(yy.tos-2), 
yy.value_stack(yy.tos-1)); 
yyval := 
yy.value_stack(yy.tos-2); 

when 102 => -- #line 384
 
yyval := 
yy.value_stack(yy.tos-1); 

when 103 => -- #line 389
 Add_Selector_Filter (
yy.value_stack(yy.tos-1), 
yy.value_stack(yy.tos)); 
yyval := 
yy.value_stack(yy.tos-1); 

when 105 => -- #line 396
 Set_Selector (
yyval, SEL_ELEMENT, 
yy.value_stack(yy.tos)); 

when 106 => -- #line 399
 Set_Selector (
yyval, SEL_IDENT, 
yy.value_stack(yy.tos)); 

when 107 => -- #line 402
 Set_Selector (
yyval, SEL_CLASS, 
yy.value_stack(yy.tos)); 

when 110 => -- #line 409
 Set_Selector (
yyval, SEL_NOT, 
yy.value_stack(yy.tos-2)); 

when 115 => -- #line 424
 
yyval := 
yy.value_stack(yy.tos); 

when 116 => -- #line 429
 
yyval := 
yy.value_stack(yy.tos); 

when 123 => -- #line 448
 Set_Selector (
yyval, SEL_HAS_ATTRIBUTE, 
yy.value_stack(yy.tos-2)); 

when 124 => -- #line 451
 Set_Selector (
yyval, 
yy.value_stack(yy.tos-4).Sel, 
yy.value_stack(yy.tos-6), 
yy.value_stack(yy.tos-2)); 

when 125 => -- #line 454
 Set_Selector (
yyval, 
yy.value_stack(yy.tos-4).Sel, 
yy.value_stack(yy.tos-6), 
yy.value_stack(yy.tos-2)); 

when 126 => -- #line 457
 Error (
yy.value_stack(yy.tos).Line, 
yy.value_stack(yy.tos).column, "Invalid attribute definition."); 

when 127 => -- #line 462
 Set_Selector_Type (
yyval, SEL_EQ_ATTRIBUTE, yylineno, yylinecol); 

when 128 => -- #line 465
 Set_Selector_Type (
yyval, SEL_CONTAIN_ATTRIBUTE, yylineno, yylinecol); 

when 129 => -- #line 468
 Set_Selector_Type (
yyval, SEL_ORMATCH_ATTRIBUTE, yylineno, yylinecol); 

when 130 => -- #line 471
 Set_Selector_Type (
yyval, SEL_STARTS_ATTRIBUTE, yylineno, yylinecol); 

when 131 => -- #line 474
 Set_Selector_Type (
yyval, SEL_ENDS_ATTRIBUTE, yylineno, yylinecol); 

when 132 => -- #line 477
 Set_Selector_Type (
yyval, SEL_MATCH_ATTRIBUTE, yylineno, yylinecol); 

when 133 => -- #line 483
 Set_Selector (
yyval, SEL_PSEUDO_ELEMENT, 
yy.value_stack(yy.tos)); 

when 134 => -- #line 486
 Set_Selector (
yyval, SEL_PSEUDO_CLASS, 
yy.value_stack(yy.tos)); 

when 135 => -- #line 489
 Set_Selector (
yyval, SEL_FUNCTION, 
yy.value_stack(yy.tos-3)); 

when 138 => -- #line 500
 
yyval := 
yy.value_stack(yy.tos); 

when 139 => -- #line 505
 
yyval := 
yy.value_stack(yy.tos); 

when 140 => -- #line 508
 
yyval := 
yy.value_stack(yy.tos-4); 

when 141 => -- #line 511
 
yyval := 
yy.value_stack(yy.tos-1); 

when 142 => -- #line 516
 Append_Property (Current_Rule, Document, 
yy.value_stack(yy.tos-1)); 

when 143 => -- #line 519
 Append_Property (Current_Rule, Document, 
yy.value_stack(yy.tos-1)); Error (
yy.value_stack(yy.tos-4).Line, 
yy.value_stack(yy.tos-4).Column, "Invalid property"); yyerrok; 

when 144 => -- #line 522
 
yyval := 
yy.value_stack(yy.tos-3); Error (
yy.value_stack(yy.tos-2).Line, 
yy.value_stack(yy.tos-2).Column, "Invalid property (2)"); yyerrok; 

when 145 => -- #line 525
 Append_Property (Current_Rule, Document, 
yy.value_stack(yy.tos-1)); 

when 146 => -- #line 530
 Set_Property (
yyval, 
yy.value_stack(yy.tos-4), 
yy.value_stack(yy.tos-1), True); 

when 147 => -- #line 533
 Set_Property (
yyval, 
yy.value_stack(yy.tos-3), 
yy.value_stack(yy.tos), False); 

when 148 => -- #line 536
 Error (
yy.value_stack(yy.tos).Line, 
yy.value_stack(yy.tos).Column, "Missing ''' or '""' at end of string"); Set_Property (
yyval, 
yy.value_stack(yy.tos-3), EMPTY, False); 

when 149 => -- #line 539
 Error (
yy.value_stack(yy.tos).Line, 
yy.value_stack(yy.tos).Column, "Invalid property value: " & YYText); Set_Property (
yyval, 
yy.value_stack(yy.tos-2), 
yy.value_stack(yy.tos-2), False); 

when 150 => -- #line 542
 Error (
yy.value_stack(yy.tos-1).Line, 
yy.value_stack(yy.tos-1).Column, "Missing ':' after property name"); Set_Property (
yyval, 
yy.value_stack(yy.tos-1), EMPTY, False); 

when 151 => -- #line 545
 Error (yylval.Line, yylval.Column, "Invalid property name"); 
yyval := EMPTY; 

when 152 => -- #line 550
 
yyval := 
yy.value_stack(yy.tos-1); 

when 153 => -- #line 553
 Warning (
yy.value_stack(yy.tos-1).Line, 
yy.value_stack(yy.tos-1).Column, "IE7 '*' symbol hack is used"); 
yyval := 
yy.value_stack(yy.tos-1); 

when 155 => -- #line 562
 CSS.Parser.Set_Expr (
yyval, 
yy.value_stack(yy.tos-2), 
yy.value_stack(yy.tos-1), 
yy.value_stack(yy.tos)); 

when 156 => -- #line 565
 CSS.Parser.Set_Expr (
yyval, 
yy.value_stack(yy.tos-1), 
yy.value_stack(yy.tos)); 

when 158 => -- #line 572
 CSS.Parser.Set_Value (
yyval, Document, 
yy.value_stack(yy.tos)); 

when 159 => -- #line 575
 CSS.Parser.Set_Value (
yyval, Document, 
yy.value_stack(yy.tos)); 

when 160 => -- #line 578
 CSS.Parser.Set_Value (
yyval, Document, 
yy.value_stack(yy.tos-1)); 

when 161 => -- #line 581
 CSS.Parser.Set_Value (
yyval, Document, 
yy.value_stack(yy.tos-1)); 

when 162 => -- #line 584
 CSS.Parser.Set_Value (
yyval, Document, 
yy.value_stack(yy.tos-1)); 

when 163 => -- #line 587
 CSS.Parser.Set_Value (
yyval, Document, 
yy.value_stack(yy.tos)); 

when 164 => -- #line 590
 
yyval := 
yy.value_stack(yy.tos); 

when 165 => -- #line 593
 Error (
yy.value_stack(yy.tos).Line, 
yy.value_stack(yy.tos).Column, "Invalid url()"); 
yyval := EMPTY; 

when 166 => -- #line 600
 
yyval := 
yy.value_stack(yy.tos-1); 

when 167 => -- #line 603
 
yyval := 
yy.value_stack(yy.tos-1); 

when 168 => -- #line 606
 
yyval := 
yy.value_stack(yy.tos-1); 

when 169 => -- #line 609
 
yyval := 
yy.value_stack(yy.tos-1); 

when 170 => -- #line 612
 
yyval := 
yy.value_stack(yy.tos-1); 

when 171 => -- #line 615
 
yyval := 
yy.value_stack(yy.tos-1); 

when 172 => -- #line 618
 
yyval := 
yy.value_stack(yy.tos-1); 

when 173 => -- #line 621
 
yyval := 
yy.value_stack(yy.tos-1); 

when 174 => -- #line 626
 CSS.Parser.Set_Function (
yyval, 
yy.value_stack(yy.tos-4), 
yy.value_stack(yy.tos-2)); 

when 175 => -- #line 629
 Error (
yy.value_stack(yy.tos-3).Line, 
yy.value_stack(yy.tos-3).Column, "Invalid function parameter"); 

when 180 => -- #line 646
 Set_Color (
yyval, 
yy.value_stack(yy.tos-1)); 

                    when others => null;
                end case;


            -- Pop RHS states and goto next state
            yy.tos      := yy.tos - rule_length(yy.rule_id) + 1;
            if yy.tos > yy.stack_size then
                text_io.put_line(" Stack size exceeded on state_stack");
                raise yy_Tokens.syntax_error;
            end if;
            yy.state_stack(yy.tos) := goto_state(yy.state_stack(yy.tos-1) ,
                                 get_lhs_rule(yy.rule_id));

              yy.value_stack(yy.tos) := yyval;

            if yy.debug then
                reduce_debug(yy.rule_id,
                    goto_state(yy.state_stack(yy.tos - 1),
                               get_lhs_rule(yy.rule_id)));
            end if;

        end if;


    end loop;


end yyparse;

   --  Set or clear the parser debug flag.
   -- procedure Set_Debug (Flag : in Boolean) is
   -- begin
   --   yy.DEBUG := Flag;
   -- end Set_Debug;

end CSS.Parser.Parser;
